{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "22de77a4",
   "metadata": {},
   "source": [
    "# **Código Datos por metrópoli**\n",
    "Esto será el código para ____. <br>\n",
    "<br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "da9ed588",
   "metadata": {},
   "outputs": [],
   "source": [
    "import geopandas as gpd\n",
    "from sqlalchemy import create_engine\n",
    "import os\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from shapely.geometry import Polygon\n",
    "from dbfread import DBF\n",
    "import jenkspy\n",
    "import json\n",
    "from jenkspy import jenks_breaks\n",
    "import psycopg2\n",
    "import openpyxl"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7f1d232b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rutas de los archivos GeoPackage y Shapefile\n",
    "MAPA_TIPO_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\Nac_Tipologias.gpkg\"\n",
    "\n",
    "SHP_MZN_01_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\01_aguascalientes\\conjunto_de_datos\\01m.shp\"\n",
    "SHP_MZN_02_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\02_bajacalifornia\\conjunto_de_datos\\02m.shp\"\n",
    "SHP_MZN_03_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\03_bajacaliforniasur\\conjunto_de_datos\\03m.shp\"\n",
    "SHP_MZN_04_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\04_campeche\\conjunto_de_datos\\04m.shp\"\n",
    "SHP_MZN_05_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\05_coahuiladezaragoza\\conjunto_de_datos\\05m.shp\"\n",
    "SHP_MZN_06_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\06_colima\\conjunto_de_datos\\06m.shp\"\n",
    "SHP_MZN_07_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\07_chiapas\\conjunto_de_datos\\07m.shp\"\n",
    "SHP_MZN_08_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\08_chihuahua\\conjunto_de_datos\\08m.shp\"\n",
    "SHP_MZN_09_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\09_ciudaddemexico\\conjunto_de_datos\\09m.shp\"\n",
    "SHP_MZN_10_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\10_durango\\conjunto_de_datos\\10m.shp\"\n",
    "SHP_MZN_11_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\11_guanajuato\\conjunto_de_datos\\11m.shp\"\n",
    "SHP_MZN_12_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\12_guerrero\\conjunto_de_datos\\12m.shp\"\n",
    "SHP_MZN_13_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\13_hidalgo\\conjunto_de_datos\\13m.shp\"\n",
    "SHP_MZN_14_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\14_jalisco\\conjunto_de_datos\\14m.shp\"\n",
    "SHP_MZN_15_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\15_mexico\\conjunto_de_datos\\15m.shp\"\n",
    "SHP_MZN_16_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\16_michoacandeocampo\\conjunto_de_datos\\16m.shp\"\n",
    "SHP_MZN_17_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\17_morelos\\conjunto_de_datos\\17m.shp\"\n",
    "SHP_MZN_18_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\18_nayarit\\conjunto_de_datos\\18m.shp\"\n",
    "SHP_MZN_19_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\19_nuevoleon\\conjunto_de_datos\\19m.shp\"\n",
    "SHP_MZN_20_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\20_oaxaca\\conjunto_de_datos\\20m.shp\"\n",
    "SHP_MZN_21_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\21_puebla\\conjunto_de_datos\\21m.shp\"\n",
    "SHP_MZN_22_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\22_queretaro\\conjunto_de_datos\\22m.shp\"\n",
    "SHP_MZN_23_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\23_quintanaroo\\conjunto_de_datos\\23m.shp\"\n",
    "SHP_MZN_24_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\24_sanluispotosi\\conjunto_de_datos\\24m.shp\"\n",
    "SHP_MZN_25_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\25_sinaloa\\conjunto_de_datos\\25m.shp\"\n",
    "SHP_MZN_26_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\26_sonora\\conjunto_de_datos\\26m.shp\"\n",
    "SHP_MZN_27_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\27_tabasco\\conjunto_de_datos\\27m.shp\"\n",
    "SHP_MZN_28_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\28_tamaulipas\\conjunto_de_datos\\28m.shp\"\n",
    "SHP_MZN_29_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\29_tlaxcala\\conjunto_de_datos\\29m.shp\"\n",
    "SHP_MZN_30_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\30_veracruzignaciodelallave\\conjunto_de_datos\\30m.shp\"\n",
    "SHP_MZN_31_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\31_yucatan\\conjunto_de_datos\\31m.shp\"\n",
    "SHP_MZN_32_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\32_zacatecas\\conjunto_de_datos\\32m.shp\"\n",
    "\n",
    "SHP_LOC_NAC_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\marco_geoestadistico_2020\\MG_2020_Integrado\\conjunto_de_datos\\00l.shp\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ad81f912",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n",
      "0\n"
     ]
    }
   ],
   "source": [
    "# #PROCESO PREPARACIÓN GPKG BASE Y UNION CENSOS\n",
    "\n",
    "\n",
    "# #CONCATENAR GPKG\n",
    "\n",
    " #Carga de capas de manzanas y localidades a gdf\n",
    "SHP_MZN_01_gdf = gpd.read_file(SHP_MZN_01_ruta)\n",
    "print(0)\n",
    "SHP_MZN_02_gdf = gpd.read_file(SHP_MZN_02_ruta)\n",
    "print(0)\n",
    "SHP_MZN_03_gdf = gpd.read_file(SHP_MZN_03_ruta)\n",
    "print(0)\n",
    "SHP_MZN_04_gdf = gpd.read_file(SHP_MZN_04_ruta)\n",
    "print(0)\n",
    "SHP_MZN_05_gdf = gpd.read_file(SHP_MZN_05_ruta)\n",
    "print(0)\n",
    "SHP_MZN_06_gdf = gpd.read_file(SHP_MZN_06_ruta)\n",
    "print(0)\n",
    "SHP_MZN_07_gdf = gpd.read_file(SHP_MZN_07_ruta)\n",
    "print(0)\n",
    "SHP_MZN_08_gdf = gpd.read_file(SHP_MZN_08_ruta)\n",
    "print(0)\n",
    "SHP_MZN_09_gdf = gpd.read_file(SHP_MZN_09_ruta)\n",
    "print(0)\n",
    "SHP_MZN_10_gdf = gpd.read_file(SHP_MZN_10_ruta)\n",
    "print(0)\n",
    "SHP_MZN_11_gdf = gpd.read_file(SHP_MZN_11_ruta)\n",
    "print(0)\n",
    "SHP_MZN_12_gdf = gpd.read_file(SHP_MZN_12_ruta)\n",
    "print(0)\n",
    "SHP_MZN_13_gdf = gpd.read_file(SHP_MZN_13_ruta)\n",
    "print(0)\n",
    "SHP_MZN_14_gdf = gpd.read_file(SHP_MZN_14_ruta)\n",
    "print(0)\n",
    "SHP_MZN_15_gdf = gpd.read_file(SHP_MZN_15_ruta)\n",
    "print(0)\n",
    "SHP_MZN_16_gdf = gpd.read_file(SHP_MZN_16_ruta)\n",
    "print(0)\n",
    "SHP_MZN_17_gdf = gpd.read_file(SHP_MZN_17_ruta)\n",
    "print(0)\n",
    "SHP_MZN_18_gdf = gpd.read_file(SHP_MZN_18_ruta)\n",
    "print(0)\n",
    "SHP_MZN_19_gdf = gpd.read_file(SHP_MZN_19_ruta)\n",
    "print(0)\n",
    "SHP_MZN_20_gdf = gpd.read_file(SHP_MZN_20_ruta)\n",
    "print(0)\n",
    "SHP_MZN_21_gdf = gpd.read_file(SHP_MZN_21_ruta)\n",
    "print(0)\n",
    "SHP_MZN_22_gdf = gpd.read_file(SHP_MZN_22_ruta)\n",
    "print(0)\n",
    "SHP_MZN_23_gdf = gpd.read_file(SHP_MZN_23_ruta)\n",
    "print(0)\n",
    "SHP_MZN_24_gdf = gpd.read_file(SHP_MZN_24_ruta)\n",
    "print(0)\n",
    "SHP_MZN_25_gdf = gpd.read_file(SHP_MZN_25_ruta)\n",
    "print(0)\n",
    "SHP_MZN_26_gdf = gpd.read_file(SHP_MZN_26_ruta)\n",
    "print(0)\n",
    "SHP_MZN_27_gdf = gpd.read_file(SHP_MZN_27_ruta)\n",
    "print(0)\n",
    "SHP_MZN_28_gdf = gpd.read_file(SHP_MZN_28_ruta)\n",
    "print(0)\n",
    "SHP_MZN_29_gdf = gpd.read_file(SHP_MZN_29_ruta)\n",
    "print(0)\n",
    "SHP_MZN_30_gdf = gpd.read_file(SHP_MZN_30_ruta)\n",
    "print(0)\n",
    "SHP_MZN_31_gdf = gpd.read_file(SHP_MZN_31_ruta)\n",
    "print(0)\n",
    "SHP_MZN_32_gdf = gpd.read_file(SHP_MZN_32_ruta)\n",
    "\n",
    "# Concatenar\n",
    "SHP_MZN_gdf = gpd.GeoDataFrame(pd.concat([SHP_MZN_01_gdf,\n",
    "                                            SHP_MZN_02_gdf,\n",
    "                                            SHP_MZN_03_gdf,\n",
    "                                            SHP_MZN_04_gdf,\n",
    "                                            SHP_MZN_05_gdf,\n",
    "                                            SHP_MZN_06_gdf,\n",
    "                                            SHP_MZN_07_gdf,\n",
    "                                            SHP_MZN_08_gdf,\n",
    "                                            SHP_MZN_09_gdf,\n",
    "                                            SHP_MZN_10_gdf,\n",
    "                                            SHP_MZN_11_gdf,\n",
    "                                            SHP_MZN_12_gdf,\n",
    "                                            SHP_MZN_13_gdf,\n",
    "                                            SHP_MZN_14_gdf,\n",
    "                                            SHP_MZN_15_gdf,\n",
    "                                            SHP_MZN_16_gdf,\n",
    "                                            SHP_MZN_17_gdf,\n",
    "                                            SHP_MZN_18_gdf,\n",
    "                                            SHP_MZN_19_gdf,\n",
    "                                            SHP_MZN_20_gdf,\n",
    "                                            SHP_MZN_21_gdf,\n",
    "                                            SHP_MZN_22_gdf,\n",
    "                                            SHP_MZN_23_gdf,\n",
    "                                            SHP_MZN_24_gdf,\n",
    "                                            SHP_MZN_25_gdf,\n",
    "                                            SHP_MZN_26_gdf,\n",
    "                                            SHP_MZN_27_gdf,\n",
    "                                            SHP_MZN_28_gdf,\n",
    "                                            SHP_MZN_29_gdf,\n",
    "                                            SHP_MZN_30_gdf,\n",
    "                                            SHP_MZN_31_gdf,\n",
    "                                            SHP_MZN_32_gdf], ignore_index=True))\n",
    "\n",
    "\n",
    "#guardar a shp\n",
    "SHP_MZN_gdf.to_file(r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\MZN_NAC\", layer='MZN', driver='GPKG')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1891cb54",
   "metadata": {},
   "outputs": [],
   "source": [
    "##########CREAR GPKG BASE\n",
    "# Releer shp\n",
    "SHP_MZN_gdf= gpd.read_file(r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\MZN_NAC\", layer='MZN')\n",
    "SHP_LOC_gdf = gpd.read_file(SHP_LOC_NAC_ruta)\n",
    "\n",
    "# CREAR GPKG BASE DESDE gdf DE MANZANAS\n",
    "SHP_MZN_gdf.to_file(MAPA_TIPO_ruta, layer='Mapa_Tipologias', driver='GPKG')\n",
    "\n",
    "# Leer gpkg base\n",
    "MAPA_TIPO_gdf = gpd.read_file(MAPA_TIPO_ruta, layer='Mapa_Tipologias')\n",
    "\n",
    "# Selección de ITER rural\n",
    "SHP_LOC_gdf_RURAL = SHP_LOC_gdf[SHP_LOC_gdf['AMBITO'] == 'Rural']\n",
    "\n",
    "# Concatenar ITER rural a la capa existente\n",
    "gdf_concatenated = gpd.GeoDataFrame(pd.concat([MAPA_TIPO_gdf, SHP_LOC_gdf_RURAL], ignore_index=True))\n",
    "\n",
    "# Guardar la capa concatenada en el GeoPackage base\n",
    "gdf_concatenated.to_file(MAPA_TIPO_ruta, layer='Mapa_Tipologias', driver='GPKG', overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ee103068",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Rutas de los archivos GeoPackage y Shapefile\n",
    "archivo_gpkg = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\nacional_subtipologias.gpkg\"\n",
    "\n",
    "# Cargar archivos como GeoDataFrames\n",
    "gdf_gpkg = gpd.read_file(archivo_gpkg)\n",
    "gdf_shp = gpd.read_file(MAPA_TIPO_ruta, layer='Mapa_Tipologias')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "917897e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Unir GeoDataFrames por el campo CVEGEO\n",
    "gdf_union = gdf_shp.merge(gdf_gpkg, on='CVEGEO', how='inner')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "90e0fb38",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Obtener las columnas que tienen el sufijo '_y'\n",
    "columns_to_drop = [col for col in gdf_union.columns if col.endswith('_y')]\n",
    "\n",
    "# Eliminar las columnas con el sufijo '_y'\n",
    "gdf_union.drop(columns=columns_to_drop, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "07851c5d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0          0.237947\n",
      "1          0.574208\n",
      "2          0.482523\n",
      "3          0.832863\n",
      "4          2.436638\n",
      "            ...    \n",
      "941362    17.054942\n",
      "941363     7.225411\n",
      "941364    54.618256\n",
      "941365    10.683117\n",
      "941366    10.938117\n",
      "Name: area_ha, Length: 941367, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Imprimir las columnas actuales\n",
    "print(MAPA_TIPO_gdf['area_ha'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e7137c1b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convertir el DataFrame resultante en un GeoDataFrame\n",
    "gdf_union = gpd.GeoDataFrame(gdf_union, geometry='geometry_x')\n",
    "\n",
    "# Guardar el GeoDataFrame resultante en el GeoPackage\n",
    "gdf_union.to_file(MAPA_TIPO_ruta, layer='Mapa_Nac_Tipologias', driver='GPKG', overwrite=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2afaf81",
   "metadata": {},
   "source": [
    "# Estadísticas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bc72db0f",
   "metadata": {},
   "outputs": [],
   "source": [
    "MAPA_TIPO_ruta = r\"C:\\Users\\ADMIN\\Desktop\\Ejercicio\\Mapa_Tipologías_NAC\"\n",
    "\n",
    "# Leer gpkg base\n",
    "MAPA_TIPO_gdf = gpd.read_file(MAPA_TIPO_ruta, layer='Mapa_SubTipologias')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8cfb3f3",
   "metadata": {},
   "source": [
    "# Resultados por Metrópoli y Tipología"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "fe214dba",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Columnas que se sumarán\n",
    "columnas_a_sumar = ['POPTOT2010', 'POPTOT2020', 'VIVTOT2010', 'VIVTOT2020', 'VIVPARDES2010',\n",
    "       'VIVPARDES2020', 'VIV1C2010', 'VIV1C2020', 'VIV2C2010', 'VIV2C2020',\n",
    "       'VIV3CYM2010', 'VIV3CYM2020','area_ha']\n",
    "\n",
    "# Sumar las columnas y agrupar por 'TIPOLOGIA' y 'NOM_MET'\n",
    "MAPA_TIPO_sumado = MAPA_TIPO_gdf.groupby(['TIPOLOGIA', 'NOM_MET','TIPO_MET'])[columnas_a_sumar].sum().reset_index()\n",
    "\n",
    "# Contar las manzanas agrupadas\n",
    "MAPA_TIPO_sumado['Manzanas'] = MAPA_TIPO_gdf.groupby(['TIPOLOGIA', 'NOM_MET','TIPO_MET']).size().values\n",
    "\n",
    "# Calcular los campos\n",
    "MAPA_TIPO_sumado['DIFPOP'] = MAPA_TIPO_sumado['POPTOT2020'] - MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['DIFVIV'] = MAPA_TIPO_sumado['VIVTOT2020'] - MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['RELPOP'] = MAPA_TIPO_sumado['DIFPOP'] / MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['RELVIV'] = MAPA_TIPO_sumado['DIFVIV'] / MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['CVEPOP'] = np.where(MAPA_TIPO_sumado['RELPOP'] < -0.000000001, 'A', 'B')\n",
    "MAPA_TIPO_sumado['CVEVIV'] = np.where(MAPA_TIPO_sumado['RELVIV'] < -.0703, '1',\n",
    "                                   np.where((MAPA_TIPO_sumado['RELVIV'] >= -.0703) & (MAPA_TIPO_sumado['RELVIV'] <= .0703), \n",
    "                                            '2', '3'))\n",
    "MAPA_TIPO_sumado['CVE'] = MAPA_TIPO_sumado['CVEPOP'] + MAPA_TIPO_sumado['CVEVIV'].astype(str)\n",
    "\n",
    "conditions = [\n",
    "    (MAPA_TIPO_sumado['POPTOT2020'] == 0),\n",
    "    (MAPA_TIPO_sumado['POPTOT2010'] == 0) & (MAPA_TIPO_sumado['VIVTOT2010'] == 0) & (MAPA_TIPO_sumado['CVE'] == 'B3')\n",
    "]\n",
    "choices = ['DH', 'B3\\'']\n",
    "MAPA_TIPO_sumado['TIPOLOGIA'] = np.select(conditions, choices, default=MAPA_TIPO_sumado['CVE'])\n",
    "\n",
    "MAPA_TIPO_sumado['DENS_POP10'] = MAPA_TIPO_sumado['POPTOT2010'] / MAPA_TIPO_sumado['area_ha']\n",
    "MAPA_TIPO_sumado['DENS_POP20'] = MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['area_ha']\n",
    "\n",
    "MAPA_TIPO_sumado['DENS_VIV10'] = MAPA_TIPO_sumado['VIVTOT2010'] / MAPA_TIPO_sumado['area_ha']\n",
    "MAPA_TIPO_sumado['DENS_VIV20'] = MAPA_TIPO_sumado['VIVTOT2020'] / MAPA_TIPO_sumado['area_ha']\n",
    "\n",
    "MAPA_TIPO_sumado['CUARTOS2010'] = ((MAPA_TIPO_sumado['VIV1C2010']*1) + (MAPA_TIPO_sumado['VIV1C2010']*2) + (MAPA_TIPO_sumado['VIV3CYM2010']*4))\n",
    "MAPA_TIPO_sumado['CUARTOS2020'] = ((MAPA_TIPO_sumado['VIV1C2020']*1) + (MAPA_TIPO_sumado['VIV1C2020']*2) + (MAPA_TIPO_sumado['VIV3CYM2020']*4))\n",
    "\n",
    "MAPA_TIPO_sumado['CPERC2010'] = MAPA_TIPO_sumado['CUARTOS2010'] / MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['CPERC2020'] = MAPA_TIPO_sumado['CUARTOS2020'] / MAPA_TIPO_sumado['POPTOT2020']\n",
    "\n",
    "MAPA_TIPO_sumado['HABXVIV2010'] = MAPA_TIPO_sumado['POPTOT2010'] / MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['HABXVIV2020'] = MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['VIVTOT2020']\n",
    "MAPA_TIPO_sumado['DESHABITACION'] = MAPA_TIPO_sumado['VIVPARDES2020'] / MAPA_TIPO_sumado['VIVTOT2020']\n",
    "\n",
    "# Calcular TASA_POP_MUN\n",
    "MAPA_TIPO_sumado['TASA_POP'] = (((MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['POPTOT2010']) ** (1/10)) - 1) * 100\n",
    "\n",
    "def asignar_subtipologia(row):\n",
    "    # Valores específicos para deshabitación\n",
    "    rangos_deshabitacion_grupo = [0, .0703, .1416, .2812]  # Modifica estos valores según tus necesidades\n",
    "    \n",
    "    # Asignar subtipología según los rangos definidos\n",
    "    if rangos_deshabitacion_grupo[0] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[1]:\n",
    "        return 'a'\n",
    "    elif rangos_deshabitacion_grupo[1] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[2]:\n",
    "        return 'b'\n",
    "    elif rangos_deshabitacion_grupo[2] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[3]:\n",
    "        return 'c'\n",
    "    elif row['DESHABITACION'] >= rangos_deshabitacion_grupo[3]:\n",
    "        return 'd'\n",
    "    else:\n",
    "        return '0'  # Valor predeterminado\n",
    "\n",
    "# Crear un nuevo campo 'R_DESHAB' y llenarlo con las subtipologías asignadas\n",
    "MAPA_TIPO_sumado['R_DESHAB'] = MAPA_TIPO_sumado.apply(asignar_subtipologia, axis=1)\n",
    "\n",
    "# Crear el campo SUBTIPOLOGÍA\n",
    "MAPA_TIPO_sumado['SUBTIPOLOGÍA'] = MAPA_TIPO_sumado['TIPOLOGIA'].astype(str) + '-' + MAPA_TIPO_sumado['R_DESHAB'].astype(str)\n",
    "\n",
    "# Guardar los datos en un archivo Excel\n",
    "MAPA_TIPO_sumado.to_excel('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_tipologias.xlsx', index=False)\n",
    "\n",
    "# Leer el archivo Excel\n",
    "wb = openpyxl.load_workbook('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_tipologias.xlsx')\n",
    "\n",
    "# Seleccionar la hoja de cálculo\n",
    "sheet = wb.active\n",
    "\n",
    "# Ajustar el ancho de las columnas automáticamente\n",
    "for col in sheet.columns:\n",
    "    max_length = 0\n",
    "    column = col[0].column_letter\n",
    "    for cell in col:\n",
    "        try:\n",
    "            if len(str(cell.value)) > max_length:\n",
    "                max_length = len(cell.value)\n",
    "        except:\n",
    "            pass\n",
    "    adjusted_width = (max_length + 2) * 1.2\n",
    "    sheet.column_dimensions[column].width = adjusted_width\n",
    "\n",
    "# Guardar los cambios en el archivo Excel\n",
    "wb.save('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_tipologias_v2.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8688e11b",
   "metadata": {},
   "source": [
    "# Resultados por Metrópoli y Deshabitación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "d45de168",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Columnas que se sumarán\n",
    "columnas_a_sumar = ['POPTOT2010', 'POPTOT2020', 'VIVTOT2010', 'VIVTOT2020', 'VIVPARDES2010',\n",
    "       'VIVPARDES2020', 'VIV1C2010', 'VIV1C2020', 'VIV2C2010', 'VIV2C2020',\n",
    "       'VIV3CYM2010', 'VIV3CYM2020','area_ha']\n",
    "\n",
    "# Sumar las columnas y agrupar por 'TIPOLOGIA' y 'NOM_MET'\n",
    "MAPA_TIPO_sumado = MAPA_TIPO_gdf.groupby(['R_DESHAB', 'NOM_MET', 'TIPO_MET'])[columnas_a_sumar].sum().reset_index()\n",
    "\n",
    "# Contar las manzanas agrupadas\n",
    "MAPA_TIPO_sumado['Manzanas'] = MAPA_TIPO_gdf.groupby(['R_DESHAB', 'NOM_MET','TIPO_MET']).size().values\n",
    "\n",
    "# Calcular los campos\n",
    "MAPA_TIPO_sumado['DIFPOP'] = MAPA_TIPO_sumado['POPTOT2020'] - MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['DIFVIV'] = MAPA_TIPO_sumado['VIVTOT2020'] - MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['RELPOP'] = MAPA_TIPO_sumado['DIFPOP'] / MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['RELVIV'] = MAPA_TIPO_sumado['DIFVIV'] / MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['CVEPOP'] = np.where(MAPA_TIPO_sumado['RELPOP'] < -0.000000001, 'A', 'B')\n",
    "MAPA_TIPO_sumado['CVEVIV'] = np.where(MAPA_TIPO_sumado['RELVIV'] < -.0703, '1',\n",
    "                                   np.where((MAPA_TIPO_sumado['RELVIV'] >= -.0703) & (MAPA_TIPO_sumado['RELVIV'] <= .0703), \n",
    "                                            '2', '3'))\n",
    "MAPA_TIPO_sumado['CVE'] = MAPA_TIPO_sumado['CVEPOP'] + MAPA_TIPO_sumado['CVEVIV'].astype(str)\n",
    "\n",
    "conditions = [\n",
    "    (MAPA_TIPO_sumado['POPTOT2020'] == 0),\n",
    "    (MAPA_TIPO_sumado['POPTOT2010'] == 0) & (MAPA_TIPO_sumado['VIVTOT2010'] == 0) & (MAPA_TIPO_sumado['CVE'] == 'B3')\n",
    "]\n",
    "choices = ['DH', 'B3\\'']\n",
    "MAPA_TIPO_sumado['TIPOLOGIA'] = np.select(conditions, choices, default=MAPA_TIPO_sumado['CVE'])\n",
    "\n",
    "MAPA_TIPO_sumado['DENS_POP10'] = MAPA_TIPO_sumado['POPTOT2010'] / MAPA_TIPO_sumado['area_ha']\n",
    "MAPA_TIPO_sumado['DENS_POP20'] = MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['area_ha']\n",
    "\n",
    "MAPA_TIPO_sumado['DENS_VIV10'] = MAPA_TIPO_sumado['VIVTOT2010'] / MAPA_TIPO_sumado['area_ha']\n",
    "MAPA_TIPO_sumado['DENS_VIV20'] = MAPA_TIPO_sumado['VIVTOT2020'] / MAPA_TIPO_sumado['area_ha']\n",
    "\n",
    "MAPA_TIPO_sumado['CUARTOS2010'] = ((MAPA_TIPO_sumado['VIV1C2010']*1) + (MAPA_TIPO_sumado['VIV1C2010']*2) + (MAPA_TIPO_sumado['VIV3CYM2010']*4))\n",
    "MAPA_TIPO_sumado['CUARTOS2020'] = ((MAPA_TIPO_sumado['VIV1C2020']*1) + (MAPA_TIPO_sumado['VIV1C2020']*2) + (MAPA_TIPO_sumado['VIV3CYM2020']*4))\n",
    "\n",
    "MAPA_TIPO_sumado['CPERC2010'] = MAPA_TIPO_sumado['CUARTOS2010'] / MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['CPERC2020'] = MAPA_TIPO_sumado['CUARTOS2020'] / MAPA_TIPO_sumado['POPTOT2020']\n",
    "\n",
    "MAPA_TIPO_sumado['HABXVIV2010'] = MAPA_TIPO_sumado['POPTOT2010'] / MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['HABXVIV2020'] = MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['VIVTOT2020']\n",
    "MAPA_TIPO_sumado['DESHABITACION'] = MAPA_TIPO_sumado['VIVPARDES2020'] / MAPA_TIPO_sumado['VIVTOT2020']\n",
    "\n",
    "# Calcular TASA_POP_MUN\n",
    "MAPA_TIPO_sumado['TASA_POP'] = (((MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['POPTOT2010']) ** (1/10)) - 1) * 100\n",
    "\n",
    "def asignar_subtipologia(row):\n",
    "    # Valores específicos para deshabitación\n",
    "    rangos_deshabitacion_grupo = [0, .0703, .1416, .2812]  # Modifica estos valores según tus necesidades\n",
    "    \n",
    "    # Asignar subtipología según los rangos definidos\n",
    "    if rangos_deshabitacion_grupo[0] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[1]:\n",
    "        return 'a'\n",
    "    elif rangos_deshabitacion_grupo[1] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[2]:\n",
    "        return 'b'\n",
    "    elif rangos_deshabitacion_grupo[2] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[3]:\n",
    "        return 'c'\n",
    "    elif row['DESHABITACION'] >= rangos_deshabitacion_grupo[3]:\n",
    "        return 'd'\n",
    "    else:\n",
    "        return '0'  # Valor predeterminado\n",
    "\n",
    "# Crear un nuevo campo 'R_DESHAB' y llenarlo con las subtipologías asignadas\n",
    "MAPA_TIPO_sumado['R_DESHAB'] = MAPA_TIPO_sumado.apply(asignar_subtipologia, axis=1)\n",
    "\n",
    "# Crear el campo SUBTIPOLOGÍA\n",
    "MAPA_TIPO_sumado['SUBTIPOLOGÍA'] = MAPA_TIPO_sumado['TIPOLOGIA'].astype(str) + '-' + MAPA_TIPO_sumado['R_DESHAB'].astype(str)\n",
    "\n",
    "# Guardar los datos en un archivo Excel\n",
    "MAPA_TIPO_sumado.to_excel('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_deshabitacion.xlsx', index=False)\n",
    "\n",
    "# Leer el archivo Excel\n",
    "wb = openpyxl.load_workbook('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_deshabitacion.xlsx')\n",
    "\n",
    "# Seleccionar la hoja de cálculo\n",
    "sheet = wb.active\n",
    "\n",
    "# Ajustar el ancho de las columnas automáticamente\n",
    "for col in sheet.columns:\n",
    "    max_length = 0\n",
    "    column = col[0].column_letter\n",
    "    for cell in col:\n",
    "        try:\n",
    "            if len(str(cell.value)) > max_length:\n",
    "                max_length = len(cell.value)\n",
    "        except:\n",
    "            pass\n",
    "    adjusted_width = (max_length + 2) * 1.2\n",
    "    sheet.column_dimensions[column].width = adjusted_width\n",
    "\n",
    "# Guardar los cambios en el archivo Excel\n",
    "wb.save('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_deshabitacion_v2.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ee107221",
   "metadata": {},
   "source": [
    "# Resultados por Metrópoli"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "f3a8982d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Columnas que se sumarán\n",
    "columnas_a_sumar = ['POPTOT2010', 'POPTOT2020', 'VIVTOT2010', 'VIVTOT2020', 'VIVPARDES2010',\n",
    "       'VIVPARDES2020', 'VIV1C2010', 'VIV1C2020', 'VIV2C2010', 'VIV2C2020',\n",
    "       'VIV3CYM2010', 'VIV3CYM2020','area_ha']\n",
    "\n",
    "# Sumar las columnas y agrupar por 'NOM_MET'\n",
    "MAPA_TIPO_sumado = MAPA_TIPO_gdf.groupby(['NOM_MET','TIPO_MET'])[columnas_a_sumar].sum().reset_index()\n",
    "\n",
    "# Contar las manzanas agrupadas\n",
    "MAPA_TIPO_sumado['Manzanas'] = MAPA_TIPO_gdf.groupby(['NOM_MET','TIPO_MET']).size().values\n",
    "\n",
    "# Recalcular los campos\n",
    "MAPA_TIPO_sumado['DIFPOP'] = MAPA_TIPO_sumado['POPTOT2020'] - MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['DIFVIV'] = MAPA_TIPO_sumado['VIVTOT2020'] - MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['RELPOP'] = MAPA_TIPO_sumado['DIFPOP'] / MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['RELVIV'] = MAPA_TIPO_sumado['DIFVIV'] / MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['CVEPOP'] = np.where(MAPA_TIPO_sumado['RELPOP'] < -0.000000001, 'A', 'B')\n",
    "MAPA_TIPO_sumado['CVEVIV'] = np.where(MAPA_TIPO_sumado['RELVIV'] < -.0703, '1',\n",
    "                                   np.where((MAPA_TIPO_sumado['RELVIV'] >= -.0703) & (MAPA_TIPO_sumado['RELVIV'] <= .0703), \n",
    "                                            '2', '3'))\n",
    "MAPA_TIPO_sumado['CVE'] = MAPA_TIPO_sumado['CVEPOP'] + MAPA_TIPO_sumado['CVEVIV'].astype(str)\n",
    "\n",
    "conditions = [\n",
    "    (MAPA_TIPO_sumado['POPTOT2020'] == 0),\n",
    "    (MAPA_TIPO_sumado['POPTOT2010'] == 0) & (MAPA_TIPO_sumado['VIVTOT2010'] == 0) & (MAPA_TIPO_sumado['CVE'] == 'B3')\n",
    "]\n",
    "choices = ['DH', 'B3\\'']\n",
    "MAPA_TIPO_sumado['TIPOLOGIA'] = np.select(conditions, choices, default=MAPA_TIPO_sumado['CVE'])\n",
    "\n",
    "MAPA_TIPO_sumado['DENS_POP10'] = MAPA_TIPO_sumado['POPTOT2010'] / MAPA_TIPO_sumado['area_ha']\n",
    "MAPA_TIPO_sumado['DENS_POP20'] = MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['area_ha']\n",
    "\n",
    "MAPA_TIPO_sumado['DENS_VIV10'] = MAPA_TIPO_sumado['VIVTOT2010'] / MAPA_TIPO_sumado['area_ha']\n",
    "MAPA_TIPO_sumado['DENS_VIV20'] = MAPA_TIPO_sumado['VIVTOT2020'] / MAPA_TIPO_sumado['area_ha']\n",
    "\n",
    "MAPA_TIPO_sumado['CUARTOS2010'] = ((MAPA_TIPO_sumado['VIV1C2010']*1) + (MAPA_TIPO_sumado['VIV1C2010']*2) + (MAPA_TIPO_sumado['VIV3CYM2010']*4))\n",
    "MAPA_TIPO_sumado['CUARTOS2020'] = ((MAPA_TIPO_sumado['VIV1C2020']*1) + (MAPA_TIPO_sumado['VIV1C2020']*2) + (MAPA_TIPO_sumado['VIV3CYM2020']*4))\n",
    "\n",
    "MAPA_TIPO_sumado['CPERC2010'] = MAPA_TIPO_sumado['CUARTOS2010'] / MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['CPERC2020'] = MAPA_TIPO_sumado['CUARTOS2020'] / MAPA_TIPO_sumado['POPTOT2020']\n",
    "\n",
    "MAPA_TIPO_sumado['HABXVIV2010'] = MAPA_TIPO_sumado['POPTOT2010'] / MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['HABXVIV2020'] = MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['VIVTOT2020']\n",
    "MAPA_TIPO_sumado['DESHABITACION'] = MAPA_TIPO_sumado['VIVPARDES2020'] / MAPA_TIPO_sumado['VIVTOT2020']\n",
    "\n",
    "# Calcular TASA_POP_MUN\n",
    "MAPA_TIPO_sumado['TASA_POP'] = (((MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['POPTOT2010']) ** (1/10)) - 1) * 100\n",
    "\n",
    "def asignar_subtipologia(row):\n",
    "    # Valores específicos para deshabitación\n",
    "    rangos_deshabitacion_grupo = [0, .0703, .1416, .2812]  # Modifica estos valores según tus necesidades\n",
    "    \n",
    "    # Asignar subtipología según los rangos definidos\n",
    "    if rangos_deshabitacion_grupo[0] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[1]:\n",
    "        return 'a'\n",
    "    elif rangos_deshabitacion_grupo[1] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[2]:\n",
    "        return 'b'\n",
    "    elif rangos_deshabitacion_grupo[2] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[3]:\n",
    "        return 'c'\n",
    "    elif row['DESHABITACION'] >= rangos_deshabitacion_grupo[3]:\n",
    "        return 'd'\n",
    "    else:\n",
    "        return '0'  # Valor predeterminado\n",
    "\n",
    "# Crear un nuevo campo 'R_DESHAB' y llenarlo con las subtipologías asignadas\n",
    "MAPA_TIPO_sumado['R_DESHAB'] = MAPA_TIPO_sumado.apply(asignar_subtipologia, axis=1)\n",
    "\n",
    "# Crear el campo SUBTIPOLOGÍA\n",
    "MAPA_TIPO_sumado['SUBTIPOLOGÍA'] = MAPA_TIPO_sumado['TIPOLOGIA'].astype(str) + '-' + MAPA_TIPO_sumado['R_DESHAB'].astype(str)\n",
    "\n",
    "\n",
    "# Guardar los datos en un archivo Excel\n",
    "MAPA_TIPO_sumado.to_excel('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_metropoli.xlsx', index=False)\n",
    "\n",
    "# Leer el archivo Excel\n",
    "wb = openpyxl.load_workbook('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_metropoli.xlsx')\n",
    "\n",
    "# Seleccionar la hoja de cálculo\n",
    "sheet = wb.active\n",
    "\n",
    "# Ajustar el ancho de las columnas automáticamente\n",
    "for col in sheet.columns:\n",
    "    max_length = 0\n",
    "    column = col[0].column_letter\n",
    "    for cell in col:\n",
    "        try:\n",
    "            if len(str(cell.value)) > max_length:\n",
    "                max_length = len(cell.value)\n",
    "        except:\n",
    "            pass\n",
    "    adjusted_width = (max_length + 2) * 1.2\n",
    "    sheet.column_dimensions[column].width = adjusted_width\n",
    "\n",
    "# Guardar los cambios en el archivo Excel\n",
    "wb.save('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_metropoli_v2.xlsx')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ad6e30f",
   "metadata": {},
   "source": [
    "# Resultados por Municipio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cb32c206",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Columnas que se sumarán\n",
    "columnas_a_sumar = ['POPTOT2010', 'POPTOT2020', 'VIVTOT2010', 'VIVTOT2020', 'VIVPARDES2010',\n",
    "       'VIVPARDES2020', 'VIV1C2010', 'VIV1C2020', 'VIV2C2010', 'VIV2C2020',\n",
    "       'VIV3CYM2010', 'VIV3CYM2020','area_ha']\n",
    "\n",
    "# Sumar las columnas y agrupar por 'NOM_MET'\n",
    "MAPA_TIPO_sumado = MAPA_TIPO_gdf.groupby(['CVEMUN', 'NOM_MET','TIPO_MET'])[columnas_a_sumar].sum().reset_index()\n",
    "\n",
    "# Contar las manzanas agrupadas\n",
    "MAPA_TIPO_sumado['Manzanas'] = MAPA_TIPO_gdf.groupby(['CVEMUN', 'NOM_MET','TIPO_MET']).size().values\n",
    "\n",
    "# Recalcular los campos\n",
    "MAPA_TIPO_sumado['DIFPOP'] = MAPA_TIPO_sumado['POPTOT2020'] - MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['DIFVIV'] = MAPA_TIPO_sumado['VIVTOT2020'] - MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['RELPOP'] = MAPA_TIPO_sumado['DIFPOP'] / MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['RELVIV'] = MAPA_TIPO_sumado['DIFVIV'] / MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['CVEPOP'] = np.where(MAPA_TIPO_sumado['RELPOP'] < -0.000000001, 'A', 'B')\n",
    "MAPA_TIPO_sumado['CVEVIV'] = np.where(MAPA_TIPO_sumado['RELVIV'] < -.0703, '1',\n",
    "                                   np.where((MAPA_TIPO_sumado['RELVIV'] >= -.0703) & (MAPA_TIPO_sumado['RELVIV'] <= .0703), \n",
    "                                            '2', '3'))\n",
    "MAPA_TIPO_sumado['CVE'] = MAPA_TIPO_sumado['CVEPOP'] + MAPA_TIPO_sumado['CVEVIV'].astype(str)\n",
    "\n",
    "conditions = [\n",
    "    (MAPA_TIPO_sumado['POPTOT2020'] == 0),\n",
    "    (MAPA_TIPO_sumado['POPTOT2010'] == 0) & (MAPA_TIPO_sumado['VIVTOT2010'] == 0) & (MAPA_TIPO_sumado['CVE'] == 'B3')\n",
    "]\n",
    "choices = ['DH', 'B3\\'']\n",
    "MAPA_TIPO_sumado['TIPOLOGIA'] = np.select(conditions, choices, default=MAPA_TIPO_sumado['CVE'])\n",
    "\n",
    "MAPA_TIPO_sumado['DENS_POP10'] = MAPA_TIPO_sumado['POPTOT2010'] / MAPA_TIPO_sumado['area_ha']\n",
    "MAPA_TIPO_sumado['DENS_POP20'] = MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['area_ha']\n",
    "\n",
    "MAPA_TIPO_sumado['DENS_VIV10'] = MAPA_TIPO_sumado['VIVTOT2010'] / MAPA_TIPO_sumado['area_ha']\n",
    "MAPA_TIPO_sumado['DENS_VIV20'] = MAPA_TIPO_sumado['VIVTOT2020'] / MAPA_TIPO_sumado['area_ha']\n",
    "\n",
    "MAPA_TIPO_sumado['CUARTOS2010'] = ((MAPA_TIPO_sumado['VIV1C2010']*1) + (MAPA_TIPO_sumado['VIV1C2010']*2) + (MAPA_TIPO_sumado['VIV3CYM2010']*4))\n",
    "MAPA_TIPO_sumado['CUARTOS2020'] = ((MAPA_TIPO_sumado['VIV1C2020']*1) + (MAPA_TIPO_sumado['VIV1C2020']*2) + (MAPA_TIPO_sumado['VIV3CYM2020']*4))\n",
    "\n",
    "MAPA_TIPO_sumado['CPERC2010'] = MAPA_TIPO_sumado['CUARTOS2010'] / MAPA_TIPO_sumado['POPTOT2010']\n",
    "MAPA_TIPO_sumado['CPERC2020'] = MAPA_TIPO_sumado['CUARTOS2020'] / MAPA_TIPO_sumado['POPTOT2020']\n",
    "\n",
    "MAPA_TIPO_sumado['HABXVIV2010'] = MAPA_TIPO_sumado['POPTOT2010'] / MAPA_TIPO_sumado['VIVTOT2010']\n",
    "MAPA_TIPO_sumado['HABXVIV2020'] = MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['VIVTOT2020']\n",
    "MAPA_TIPO_sumado['DESHABITACION'] = MAPA_TIPO_sumado['VIVPARDES2020'] / MAPA_TIPO_sumado['VIVTOT2020']\n",
    "\n",
    "# Calcular TASA_POP_MUN\n",
    "MAPA_TIPO_sumado['TASA_POP'] = (((MAPA_TIPO_sumado['POPTOT2020'] / MAPA_TIPO_sumado['POPTOT2010']) ** (1/10)) - 1) * 100\n",
    "\n",
    "def asignar_subtipologia(row):\n",
    "    # Valores específicos para deshabitación\n",
    "    rangos_deshabitacion_grupo = [0, .0703, .1416, .2812]  # Modifica estos valores según tus necesidades\n",
    "    \n",
    "    # Asignar subtipología según los rangos definidos\n",
    "    if rangos_deshabitacion_grupo[0] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[1]:\n",
    "        return 'a'\n",
    "    elif rangos_deshabitacion_grupo[1] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[2]:\n",
    "        return 'b'\n",
    "    elif rangos_deshabitacion_grupo[2] <= row['DESHABITACION'] < rangos_deshabitacion_grupo[3]:\n",
    "        return 'c'\n",
    "    elif row['DESHABITACION'] >= rangos_deshabitacion_grupo[3]:\n",
    "        return 'd'\n",
    "    else:\n",
    "        return '0'  # Valor predeterminado\n",
    "\n",
    "# Crear un nuevo campo 'R_DESHAB' y llenarlo con las subtipologías asignadas\n",
    "MAPA_TIPO_sumado['R_DESHAB'] = MAPA_TIPO_sumado.apply(asignar_subtipologia, axis=1)\n",
    "\n",
    "# Crear el campo SUBTIPOLOGÍA\n",
    "MAPA_TIPO_sumado['SUBTIPOLOGÍA'] = MAPA_TIPO_sumado['TIPOLOGIA'].astype(str) + '-' + MAPA_TIPO_sumado['R_DESHAB'].astype(str)\n",
    "\n",
    "\n",
    "# Guardar los datos en un archivo Excel\n",
    "MAPA_TIPO_sumado.to_excel('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_municipios.xlsx', index=False)\n",
    "\n",
    "# Leer el archivo Excel\n",
    "wb = openpyxl.load_workbook('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_municipios.xlsx')\n",
    "\n",
    "# Seleccionar la hoja de cálculo\n",
    "sheet = wb.active\n",
    "\n",
    "# Ajustar el ancho de las columnas automáticamente\n",
    "for col in sheet.columns:\n",
    "    max_length = 0\n",
    "    column = col[0].column_letter\n",
    "    for cell in col:\n",
    "        try:\n",
    "            if len(str(cell.value)) > max_length:\n",
    "                max_length = len(cell.value)\n",
    "        except:\n",
    "            pass\n",
    "    adjusted_width = (max_length + 2) * 1.2\n",
    "    sheet.column_dimensions[column].width = adjusted_width\n",
    "\n",
    "# Guardar los cambios en el archivo Excel\n",
    "wb.save('C:/Users/ADMIN/OneDrive - Universidad de Guadalajara/3. Voces/2024/Tipologías/Nacional/resultados_municipios_v2.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a64b4da",
   "metadata": {},
   "outputs": [],
   "source": [
    "MAPA_TIPO_ruta = r\"C:\\Users\\ADMIN\\OneDrive - Universidad de Guadalajara\\3. Voces\\2024\\Tipologías\\Nacional\\Nac_Tipologias.gpkg\"\n",
    "\n",
    "# Leer gpkg base\n",
    "MAPA_TIPO_gdf = gpd.read_file(MAPA_TIPO_ruta, layer='Mapa_Nac_Tipologias')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2ee47416",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configuración de la conexión a la base de datos PostGIS\n",
    "nombre_base_datos = 'VOCES'\n",
    "usuario = 'postgres'\n",
    "contraseña = 'admin'\n",
    "host = 'localhost'  # O el host de tu servidor PostgreSQL\n",
    "puerto = '5432'     # El puerto de tu servidor PostgreSQL\n",
    "tabla_destino = 'tipologias_nacional'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "78a4f7fb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import geoalchemy2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "fc9d9853",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Datos subidos a PostGIS en la tabla tipologias_nacional\n"
     ]
    }
   ],
   "source": [
    "# Crear una conexión a la base de datos PostGIS\n",
    "engine = create_engine(f'postgresql://{usuario}:{contraseña}@{host}:{puerto}/{nombre_base_datos}')\n",
    "\n",
    "# Guardar el GeoDataFrame resultante en la tabla de PostGIS\n",
    "MAPA_TIPO_gdf.to_postgis(tabla_destino, engine, if_exists='replace', index=False)\n",
    "\n",
    "print(f\"Datos subidos a PostGIS en la tabla {tabla_destino}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "65076e44",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "celltoolbar": "Raw Cell Format",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
